LOC    OBJ              LINE   SOURCE
                        1      ; This part is nested within Rom bank D, responsibility is to adding the health upgrade to the characters.
------
                        2      ; check the game mode and branch to the routines in free space accordingly.
036FFA FA04C0           3      ; LD A, ($C004)
                        4      ; 0x03 is the Xtreme Mode value.
036FFD FE03             5      ; CP #03
036FFF C2F17D           6      ; JP NZ, $7DF1 
037002 C30C7E           7      ; JP $7E0C
                        8      ; Padding where original code was 
037005 00               9      ; NOP
037006 00               10     ; NOP
037007 00               11     ; NOP
037008 00               12     ; NOP
037009 00               13     ; NOP
03700A 00               14     ; NOP
03700B 00               15     ; NOP
03700C 00               16     ; NOP
03700D 00               17     ; NOP
03700E 00               18     ; NOP
03700F 00               19     ; NOP
037010 00               20     ; NOP
037011 00               21     ; NOP
------
                        22     ; This is 0x7DF1 at runtime, this routine is a copy of the original code and returns to original code.
037DF1 FAC9C0           23     ; LD A, ($C0C9)
037DF4 A7               24     ; AND A
037DF5 200A             25     ; JR NZ +#A
037DF7 FAD9C0           26     ; LD, ($C0D9)
037DFA C602             27     ; ADD A, 0x02
037DFC EAD9C0           28     ; LD ($C0D9), A
037DFF 1808             29     ; JR +#8
037E01 FADEC0           30     ; LD A, ($C0DE)
037E04 C602             31     ; ADD A, 0x02
037E06 EADEC0           32     ; LD ($C0DE), A
037E09 C31270           33     ; JP $7012
------
                        34     ; This is 0x7E0C at runtime, the second routine, for Xtreme Mode.
                        35     ; Override the maximum health of both characters (0xC0D9, 0xC0DE for X and Zero respectively)
037E0C FA84C0           36     ; LD A, ($C084)
037E0F EAD9C0           37     ; LD ($C0D9), A
037E12 EADEC0           38     ; LD ($C0DE), A
                        39     ; Check which character is active
037E15 FAC9C0           40     ; LD A, ($C0C9)
037E18 A7               41     ; AND A
037E19 2008             42     ; JR NZ, +#8
                        43     ; First case: set the shadow value of X's health to the current health.
037E1B FA84C0           44     ; LD A, ($C084)
037E1E EAFEDF           45     ; LD ($DFFE), A
037E21 1806             46     ; JR, +#6 go to after Zero
                        47     ; Second case: call extra block to fix Zero's maximum health, if he picked the upgrade up.
                        48     ; This is 0x7DF1 at runtime; load Zero's current health and store it in the shadow value for Zero
037E23 FA84C0           49     ; LD A, ($C084)
037E26 EAFFDF           50     ; LD ($DFFF), A
037E29 C31270           51     ; JP $7012
------
------
                        52     ; This part is in the Rom bank 2F, which overall handles the saving and loading of the SRAM.
------
                        53     ; Instead of loading the SRAM max health to the original offset for X (0xC0D9), load it to shadow value 0xDFFE
0BE59A EAFEDF           54     ; LD ($DFFE), A
------
                        55     ; Instead of loading the SRAM max health to the original offset for Zero (0xC0DE), load it to shadow value 0xDFFF
0BE5B2 EAFFDF           56     ; LD ($DFFF), A
------
                        57     ; Takes the place of another subroutine, see the code at 0x0BFF38 (line 61)
0BE618 CD387F           58     ; CALL $7F38
------
                        59     ; This block is a new subroutine that fixes the load routine to reflect the shared health upgrades.
                        60     ; First check the game mode 
0BFF38 FA04C0           61     ; LD A, ($C004)
0BFF3B FE03             62     ; CP #03
0BFF3D FAFFDF           63     ; LD A, ($DFFF)
0BFF40 280B             64     ; JR Z, +#0B
                        65     ; Put shadow values back into original destinations 
0BFF42 EADEC0           66     ; LD ($C0DE), A
0BFF45 FAFEDF           67     ; LD A, ($DFFE)
0BFF48 EAD9C0           68     ; LD ($C0D9), A
                        69     ; skip to the end, calling back into original code.
0BFF4B 182D             70     ; JR +#2D
                        71     ; Shared health code: Firstly add the upgrade values together to get the full highest shared health value.
0BFF4D 0E10             72     ; LD C, 10
0BFF4F 91               73     ; SUB C
0BFF50 47               74     ; LD B, A
0BFF51 FAFEDF           75     ; LD A, $DFFE
0BFF54 91               76     ; SUB C
0BFF55 80               77     ; ADD A, B
0BFF56 81               78     ; ADD A, C
                        79     ; Insert this highest shared health value into the Max health offsets of both characters.
0BFF57 EAD9C0           80     ; LD $C0D9, A
0BFF5A EADEC0           81     ; LD $C0DE, A
                        82     ; Then perform some tricks if for autosaves the current health exceeds the max health.
0BFF5D 4F               83     ; LD C, A
0BFF5E 0621             84     ; LD B, 21
0BFF60 FAD5C0           85     ; LD A, $C0D5
0BFF63 B8               86     ; CP B
0BFF64 3007             87     ; JR NC +#7
0BFF66 B9               88     ; CP C
0BFF67 3004             89     ; JR NC +#4
0BFF69 79               90     ; LD A, C
0BFF6A EAD5C0           91     ; LD $C0D5, A
0BFF6D FADAC0           92     ; LD A, $C0DA
0BFF70 B8               93     ; CP B
0BFF71 3007             94     ; JR NC +#7
0BFF73 B9               95     ; CP C
0BFF74 3004             96     ; JR NC +#4
0BFF76 79               97     ; LD A, C
0BFF77 EADAC0           98     ; LD $C0DA, A
                        99     ; Going back on the original call
0BFF7A CDA369           100    ; CALL $69A3
0BFF7D C9               101    ; RET
------
                        30     ; This block affects the saving code
                        31     ; The subroutine ensures the registers contain the right values of health, see the code at 0x0BFF6C
0BE7F9 CD6C7F           32     ; CALL $7F6C
0BE7FD FAFEDF           33     ; LD A, $DFFE
                        34     ; a small section of original code that shouldnt be overwritten and thus isnt in this patch file.
                        35     ; After resuming most code normally, filler is used and then the real (compatible) max health value is stored via register B.
0BE811 00               36     ; NOP
0BE812 00               37     ; NOP
0BE813 78               38     ; LD A, B
0BE814 FAFFDF           39     ; LD ($DFFF), A
------
                        73     ; This block fixes the saving code.
                        74     ; First we check if the shadow value for Zero is set, set them to 0x10, the starting health.
0BFF6C FAFFDF           75     ; LD A, ($DFFF)
0BFF6F FE00             76     ; CP 0x00
0BFF71 2005             77     ; JR NZ +#5
0BFF73 3E10             78     ; LD A, 0x10
0BFF75 EAFFDF           79     ; LD ($DFFF), A
                        80     ; Then we are going to look at whether the max value for Zero is less or equal, or more than 0x21 (0x20 being the highest full health value)
0BFF78 0E21             81     ; LD C, 0x21
0BFF7A FADAC0           82     ; LD A, ($C0DA)
0BFF7D B9               83     ; CP C
0BFF7E 47               84     ; LD B, A
0BFF7F FAFFDF           85     ; LD A, ($DFFF)
0BFF82 3006             86     ; JR NC +#6
0BFF84 B8               87     ; CP B
0BFF85 3013             88     ; JR NC +#19
0BFF87 47               89     ; LD B, A
0BFF88 1810             90     ; JR +#16
0BFF8A 4F               91     ; LD C, A
0BFF8B FADEC0           92     ; LD A, ($C0DE)
0BFF8E 91               93     ; SUB C
0BFF8F 4F               94     ; LD C, A
0BFF90 FADEC0           95     ; LD A, ($C0DE)
0BFF93 91               96     ; SUB C
0BFF94 4F               97     ; LD C, A
0BFF95 78               98     ; LD A, B
0BFF96 90               99     ; SUB B
0BFF97 47               100    ; LD B, A
0BFF98 0E21             101    ; LD C, 0x21
                        102    ; The same steps now repeated for X
                        103    ; First we check if the shadow value for X is set, set them to 0x10, the starting health.
0BFF9A FAFEDF           104    ; LD A, ($DFFE)
0BFF9D FE00             105    ; CP 0x00
0BFF9F 2005             106    ; JR NZ +#5
0BFFA1 3E10             107    ; LD A, 0x10
0BFFA3 EAFEDF           108    ; LD ($DFFE), A
0BFFA6 FAD5C0           109    ; LD A, ($C0D5)
0BFFA9 B9               110    ; CP C
0BFFAA 300C             111    ; JR NC +#12
0BFFAC 4F               112    ; LD C, A
0BFFAD FAFEDF           113    ; LD A, ($DFFE)
0BFFB0 B9               114    ; CP C
0BFFB1 300F             115    ; JR NC +#15
0BFFB3 FAD5C0           116    ; LD A, ($C0D5)
0BFFB6 180A             117    ; JR +#10
0BFFB8 4F               118    ; LD C, A
0BFFB9 FAD9C0           119    ; LD A, ($C0D9)
0BFFBC 91               120    ; SUB C
0BFFBD 4F               121    ; LD C, A
0BFFBE FAD5C0           122    ; LD A, ($C0D5)
0BFFC1 91               123    ; SUB C
0BFFC2 C9               124    ; RET
