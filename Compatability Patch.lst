LOC    OBJ              LINE   SOURCE
                        1      ; This part is nested within Rom bank D, responsibility is to adding the health upgrade to the characters.
------
                        2      ; This first block mostly overrides original code.
                        3      ; Override the maximum health of both characters (0xC0D9, 0xC0DE for X and Zero respectively)
036FFA EAD9C0           4      ; LD ($C0D9), A
036FFD EADEC0           5      ; LD ($C0DE), A
                        6      ; Check which character is active
037000 FAC9C0           7      ; LD A, ($C0C9)
037003 A7               8      ; AND A
037004 2009             9      ; JR NZ, +#9
                        10     ; First case: set the shadow value of X's health to the current health.
037006 FA84C0           11     ; LD A, ($C084)
037009 EAFEDF           12     ; LD ($DFFE), A
03700C 1804             13     ; JR, +#4
                        14     ; padding
03700E 00               15     ; NOP
                        16     ; Second case: call extra block to fix Zero's maximum health, if he picked the upgrade up.
03700F CDF17D           17     ; CALL $7DF1
------
                        18     ; This second block is an extra function needed to ensure Zero's health is corrected. 
                        19     ; This is 0x7DF1 at runtime; load Zero's current health and store it in the shadow value for Zero
037DF1 FA84C0           20     ; LD A, ($C084)
037DF4 EAFFDF           21     ; LD ($DFFF), A
037DF7 C9               22     ; RET
------
------
                        23     ; This part is in the Rom bank 2F, which overall handles the saving and loading of the SRAM.
------
                        24     ; Instead of loading the SRAM max health to the original offset for X (0xC0D9), load it to shadow value 0xDFFE
0BE59A EAFEDF           25     ; LD ($DFFE), A
------
                        26     ; Instead of loading the SRAM max health to the original offset for Zero (0xC0DE), load it to shadow value 0xDFFF
0BE5B2 EAFFDF           27     ; LD ($DFFF), A
------
                        28     ; Takes the place of another subroutine, see the code at 0x0BFF38 (line 40)
0BE618 CD387F           29     ; CALL $7F38
------
                        30     ; This block affects the saving code
                        31     ; The subroutine ensures the registers contain the right values of health, see the code at 0x0B()
0BE7F9 CD6C7F           32     ; CALL $7F6C
0BE7FD FAFEDF           33     ; LD A, $DFFE
                        34     ; a small section of original code that shouldnt be overwritten and thus isnt in this patch file.
                        35     ; After resuming most code normally, filler is used and then the real (compatible) max health value is stored via register B.
0BE811 00               36     ; NOP
0BE812 00               37     ; NOP
0BE813 78               38     ; LD A, B
0BE814 FAFFDF           39     ; LD ($DFFF), A
------
                        40     ; This block is a new subroutine that fixes the load routine to reflect the shared health upgrades.
                        41     ; Firstly add the upgrade values together to get the full highest shared health value.
0BFF38 FAFFDF           42     ; LD A, $DFFF
0E10 ; LD C, 10
91 ; SUB C
47 ; LD B, A
FAFEDF            ; LD A, $DFFE
91 ; SUB C
80 ; ADD A, B
81 ; ADD A, C
0BFF43 EAD9C0                  ; LD $C0D9, A
0BFF46 EADEC0                  ; LD $C0DE, A
0BFF49 4F                      ; LD C, A
0BFF4A 0621                    ; LD B, 21
0BFF4C FAD5C0                  ; LD A, $C0D5
0BFF4F B8                      ; CP B
0BFF50 3007                    ; JR NC +#7
0BFF52 B9                      ; CP C
0BFF53 3004                    ; JR NC +#4
0BFF55 79                      ; LD A, C
0BFF56 EAD5C0                  ; LD $C0D5, A
0BFF59 FADAC0                  ; LD A, $C0DA
0BFF5C B8                      ; CP B
0BFF5D 3007                    ; JR NC +#7
0BFF5F B9                      ; CP C
0BFF60 3004                    ; JR NC +#4
0BFF62 79                      ; LD A, C
0BFF63 EADAC0                  ; LD $C0DA, A
                               ; Going back on the original call
0BFF66 CDA369                  ; CALL $69A3
0BFF69 C9                      ; RET
------
                               ; This block fixes the saving code.
                               ; Firstly we are going to look at whether the max value for Zero is less or equal, or more than 0x21 (0x20 being the highest full health value)
0BFF6C 0E21                    ; LD C, 0x21
0BFF6E FADAC0                  ; LD A, $C0DA
0BFF71 B9                      ; CP C
0BFF72 47                      ; LD B, A
0BFF73 FAFFDF                  ; LD A, $DFFF
0BFF76 3006                    ; JR NC +#6
0BFF78 B8                      ; CP B
0BFF79 3013                    ; JR NC +#19
0BFF7B 47                      ; LD B, A
0BFF7C 1810                    ; JR +#16
0BFF7E 4F                      ; LD C, A
0BFF7F FADEC0                  ; LD A, $C0DE
0BFF82 91                      ; SUB C
0BFF83 4F                      ; LD C, A
0BFF84 FADEC0                  ; LD A, $C0DE
0BFF87 91                      ; SUB C
0BFF88 4F                      ; LD C, A
0BFF89 78                      ; LD A, B
0BFF8A 90                      ; SUB B
0BFF8B 47                      ; LD B, A
0BFF8C 0E21                    ; LD C, 0x21
                               ; The same steps now repeated for X
0BFF8E FAD5C0                  ; LD A, $C0D5
0BFF91 B9                      ; CP C
0BFF92 300C                    ; JR NC +#12
0BFF94 4F                      ; LD C, A
0BFF95 FAFEDF                  ; LD A, $DFFE
0BFF98 B9                      ; CP C
0BFF99 300F                    ; JR NC +#15
0BFF9B FAD5C0                  ; LD A, $C0D5
0BFF9E 180A                    ; JR +#10
0BFFA0 4F                      ; LD C, A
0BFFA1 FAD9C0                  ; LD A, $C0D9
0BFFA4 91                      ; SUB C
0BFFA5 4F                      ; LD C, A
0BFFA6 FAD5C0                  ; LD A, $C0D5
0BFFA9 91                      ; SUB C
0BFFAA C9                      ; RET
